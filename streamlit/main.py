import streamlit as st
import pandas as pd
import altair as alt
import tzlocal

st.set_page_config(
    page_title="ClickZetta Replay Result Viewer",
    page_icon=":material/play_arrow:",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items = {
        'About': 'https://github.com/clickzetta/clickzetta-replay'
    }
)

with st.sidebar:
    csv = st.text_input('csv file')

if not csv:
    st.write(':point_left: Input a csv file generated by replay tool and click "Analyze" button')
    st.stop()

df = pd.read_csv(csv)

def first_column_in_df(target_df, list_of_col):
    for c in list_of_col:
        if c in target_df.columns:
            return c
    raise Exception(f'No column in {list_of_col} found in dataframe')

CATEGORY = first_column_in_df(df, ['category', 'slide_id', 'view_id'])

categories = df[CATEGORY].unique()
df['comparison'] = df['original'] / df['cz'] * 100
current_timezone = tzlocal.get_localzone().key
df['cz_start_time'] = pd.to_datetime(df['cz_start_time'], unit='ms').dt.tz_localize('UTC').dt.tz_convert(current_timezone)
df['original_start_time'] = pd.to_datetime(df['original_start_time'], unit='ms').dt.tz_localize('UTC').dt.tz_convert(current_timezone)
total = len(df)
succeed = len(df[df['rs_cnt'] != 'FAILED'])

with st.sidebar:
    with st.form('form'):
        view_elements = st.multiselect('view elements', ['cz', 'original', 'comparison'], default=['cz', 'original', 'comparison'])
        sort_by = st.selectbox('sort by', ['cz', 'original', 'comparison', 'cz_start_time'], index=2)
        filter_failed = st.checkbox('exclude failed queries', value=True)
        filter_categories = st.multiselect('filter categories', categories, default=[])
        submitted = st.form_submit_button('Analyze')

if submitted:
    if filter_failed:
        df = df[df['rs_cnt'] != 'FAILED']
    if filter_categories:
        df = df[df[CATEGORY].isin(filter_categories)]

    df = df.sort_values(sort_by).reset_index(drop=True).reset_index()
    display_total = len(df)
    faster = len(df[df['comparison'] >= 100])

    cz_stat = '\t'.join([f'Avg: {df.cz.mean():.2f}',
                         f'P50: {df.cz.quantile(0.5):.2f}',
                         f'P75: {df.cz.quantile(0.75):.2f}',
                         f'P90: {df.cz.quantile(0.9):.2f}',
                         f'P95: {df.cz.quantile(0.95):.2f}',
                         f'P99: {df.cz.quantile(0.99):.2f}'])
    ori_stat = '\t'.join([f'Avg: {df.original.mean():.2f}',
                          f'P50: {df.original.quantile(0.5):.2f}',
                          f'P75: {df.original.quantile(0.75):.2f}',
                          f'P90: {df.original.quantile(0.9):.2f}',
                          f'P95: {df.original.quantile(0.95):.2f}',
                          f'P99: {df.original.quantile(0.99):.2f}'])
    st.code(f'''
Total   : {total}\tSucceed: {succeed} ({succeed/total*100:.2f}%)
Filtered: {display_total}\tFaster : {faster} ({faster/total*100:.2f}%)
Original  \t{ori_stat}
Clickzetta\t{cz_stat}''')

    if not df.empty:
        tooltip=[alt.Tooltip('index', title='index'),
                 alt.Tooltip(CATEGORY, title='category'),
                 alt.Tooltip('id', title='id'),
                 alt.Tooltip('job_id', title='cz job id'),
                 alt.Tooltip('cz', title='cz exec time (ms)'),
                 alt.Tooltip('original', title='original exec time (ms)'),
                 alt.Tooltip('comparison:Q', title='comparison(%)', format='.2f'),]
        bar = None
        if 'cz' in view_elements:
            cz_bar = alt.Chart(df).mark_bar(width=1, align='left').encode(
                y=alt.Y('cz:Q', title=f'execution time(ms)'),
                x=alt.X('index:Q', title=None),
                color=alt.value('steelblue'),
                tooltip=tooltip,
            )
            bar = cz_bar
        if 'original' in view_elements:
            ori_bar = alt.Chart(df).mark_bar(width=1, align='right').encode(
                y=alt.Y('original:Q', title='execution time(ms)'),
                x=alt.X('index:Q'),
                color=alt.value('salmon'),
                tooltip=tooltip,
            )
            if bar:
                bar = bar + ori_bar
            else:
                bar = ori_bar
        comp_line = None
        if 'comparison' in view_elements:
            comp_line = alt.Chart(df).mark_line().encode(
                y=alt.Y('comparison:Q', title='comparison %').scale(type='log'),
                x=alt.X('index:Q'),
                color=alt.value('seagreen'),
                tooltip=tooltip,
            ) + \
            alt.Chart(df).mark_rule(strokeDash=[2,2]).encode(
                y=alt.datum(100),
            )
        c = None
        if bar and comp_line:
            c = alt.layer(bar, comp_line).resolve_scale(y='independent').interactive(bind_y=False)
        elif bar:
            c = alt.layer(bar).interactive(bind_y=False)
        if c:
            st.altair_chart(c, use_container_width=True)
        else:
            st.warning('No chart available, please select at least one view element')

        with st.expander('Detailed data', expanded=False):
            st.dataframe(df, hide_index=True, use_container_width=True)